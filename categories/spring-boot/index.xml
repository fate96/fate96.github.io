<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Spring Boot - 分类 - Luckyouo Blog</title><link>https://luckyouo.github.io/categories/spring-boot/</link><description>Spring Boot - 分类 - Luckyouo Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>urutchfj@gamil.com (luckyouo)</managingEditor><webMaster>urutchfj@gamil.com (luckyouo)</webMaster><lastBuildDate>Wed, 26 Apr 2023 18:56:38 +0800</lastBuildDate><atom:link href="https://luckyouo.github.io/categories/spring-boot/" rel="self" type="application/rss+xml"/><item><title>Eureka 服务注册中心</title><link>https://luckyouo.github.io/posts/eureka-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html/</link><pubDate>Wed, 26 Apr 2023 18:56:38 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/eureka-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html/</guid><description>前言 Springcloud 封装了Netflix 公司开发的 Eureka 模块来实现服务注册与发现。 Eureka采用了C-S的架构设计，EurekaServer 作为服务注册功能</description></item><item><title>Sentinel 熔断降级</title><link>https://luckyouo.github.io/posts/sentinel-%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7.html/</link><pubDate>Wed, 26 Apr 2023 18:14:40 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/sentinel-%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7.html/</guid><description>前言 在微服务应用下，如果某个微服务崩溃，调用他的服务若在很长时间才能收到异常消息，则会导致资源浪费，且如果在高并发的情况下，可能出现雪崩的情</description></item><item><title>异步和线程池</title><link>https://luckyouo.github.io/posts/%E5%BC%82%E6%AD%A5%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0.html/</link><pubDate>Wed, 26 Apr 2023 13:07:42 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%BC%82%E6%AD%A5%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0.html/</guid><description>前言 同步是指当方法一旦被调用就必须等待方法执行完才可以继续向下执行其他操作，而异步不关心方法的执行过程，触发要调用的方法后就继续向下执行其他</description></item><item><title>Feign 远程调用</title><link>https://luckyouo.github.io/posts/feign-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.html/</link><pubDate>Wed, 26 Apr 2023 11:00:25 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/feign-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.html/</guid><description>前言 远程调用服务常用的协议有 http 和 rpc 协议，其中 openfign 采用的是 http 协议。 Feign 是 netflix 开发的，但不在维护。Spring 官方在 Feign 的基础上开发了 OpenFeign</description></item><item><title>分布式事务的基本实现方式</title><link>https://luckyouo.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html/</link><pubDate>Wed, 26 Apr 2023 09:43:17 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html/</guid><description>前言 事务的几个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation) 和持久性(Durabilily)，简称就是 ACID Spring Boot 原生提供的</description></item><item><title>Nacos 注册中心和配置中心</title><link>https://luckyouo.github.io/posts/nacos-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html/</link><pubDate>Tue, 25 Apr 2023 23:11:57 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/nacos-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html/</guid><description>前言 在微服务当中，各个微服务需要进行相互调用，一般是通过注册中心来完成。 注册中心 常用的注册中心有 Nacos 和 Eureka，前者是 alibaba 中的组件，后者是 Spring</description></item><item><title>RabbitMQ 消息队列</title><link>https://luckyouo.github.io/posts/rabbitmq-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html/</link><pubDate>Tue, 25 Apr 2023 20:15:04 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/rabbitmq-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html/</guid><description>前言 在微服务中，可以通过消息中间件来给服务之间传递数据，并提升系统的异步能力。 消息队列 消息队列主要有如下四种实现方式： 点对点式：消息只有唯一</description></item><item><title>Redisson 分布式锁</title><link>https://luckyouo.github.io/posts/redisson-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html/</link><pubDate>Tue, 25 Apr 2023 19:35:57 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/redisson-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html/</guid><description>前言 在微服务应用当中，某一个服务可能部署在多台机器上，在高并发的情况下，对资源的访问可能出现读写数据异常，而 Java 内部提供的 JUC 只能在单应用的情况</description></item></channel></rss>