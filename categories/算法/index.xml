<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>算法 - 分类 - Luckyouo Blog</title><link>https://luckyouo.github.io/categories/%E7%AE%97%E6%B3%95/</link><description>算法 - 分类 - Luckyouo Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 14 Jun 2022 15:03:40 +0800</lastBuildDate><atom:link href="https://luckyouo.github.io/categories/%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml"/><item><title>位运算常用技巧</title><link>https://luckyouo.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.html/</link><pubDate>Tue, 14 Jun 2022 15:03:40 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.html/</guid><description>前言 位运算总共有六种，与、或、取反、异或、左移和右移，在面试和算法题目当中，偶尔会出现考察位运算的题目，故总结一些在算法中常用的位运算的操作</description></item><item><title>贪心算法</title><link>https://luckyouo.github.io/posts/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html/</link><pubDate>Thu, 09 Jun 2022 09:51:07 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html/</guid><description>前言 当最优子结构可以决定全局最优解时，则可以使用贪心算法，在保证每一步都是当前最优子结构，从而得到全局最优解。和动态规划相比，动态规划则将每</description></item><item><title>0-1 BFS</title><link>https://luckyouo.github.io/posts/0-1-bfs.html/</link><pubDate>Thu, 02 Jun 2022 10:45:15 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/0-1-bfs.html/</guid><description>前言 若要寻找两个节点路径最小权重，最为常用的方法是 Dijkstra， 当一个图各个节点的权重只有 0 和 1 （k）时，则可以使用 0-1 BFS 进行搜索 算法思想</description></item><item><title>单调栈</title><link>https://luckyouo.github.io/posts/%E5%8D%95%E8%B0%83%E6%A0%88.html/</link><pubDate>Tue, 24 May 2022 11:18:19 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8D%95%E8%B0%83%E6%A0%88.html/</guid><description>前言 极值和最值不一样，极值是由区间范围所决定的，最值是由整个区间所决定的，当求极值的一个区间的影响范围时，由于涉及多个区间，如果直接暴力求，</description></item><item><title>差分</title><link>https://luckyouo.github.io/posts/%E5%B7%AE%E5%88%86.html/</link><pubDate>Thu, 19 May 2022 10:54:59 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%B7%AE%E5%88%86.html/</guid><description>前言 差分是前缀和的相对操作，前缀和主要是用在不改变数组的情况下，相反，差分主要用在需要多次改变数组的情况下/ 算法基本思想 计算数组两两元素之间</description></item><item><title>二分查找</title><link>https://luckyouo.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html/</link><pubDate>Wed, 18 May 2022 10:22:15 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html/</guid><description>前言 二分查找一般是用来在有序序列中查找某个范围的数据，通过不断缩小范围来求解，但也可以搭配其他算法来求解其他问题。 二分搜索问题 这是学习二分查</description></item><item><title>重复数据查找</title><link>https://luckyouo.github.io/posts/%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE.html/</link><pubDate>Sun, 08 May 2022 08:45:15 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE.html/</guid><description>前言 查找数组中的重复数据，是非常经典的算法题。故总结一下查找重复数据的各种算法实现。 算法 题型一 题目：在一个数组 nums 中除一个数字只出现一次之外，</description></item><item><title>约瑟环</title><link>https://luckyouo.github.io/posts/%E7%BA%A6%E7%91%9F%E7%8E%AF.html/</link><pubDate>Wed, 04 May 2022 09:00:39 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E7%BA%A6%E7%91%9F%E7%8E%AF.html/</guid><description>前言 阿橋问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。 人们站在一个等待</description></item><item><title>自动机</title><link>https://luckyouo.github.io/posts/%E8%87%AA%E5%8A%A8%E6%9C%BA.html/</link><pubDate>Fri, 29 Apr 2022 10:20:46 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E8%87%AA%E5%8A%A8%E6%9C%BA.html/</guid><description>前言 确定有限状态自动机或确定有限自动机（英语：deterministic finite automaton, DFA）是一个能实现状态转移的自动机。对于一个给定的属于该自动机</description></item><item><title>回溯法</title><link>https://luckyouo.github.io/posts/%E5%9B%9E%E6%BA%AF%E6%B3%95.html/</link><pubDate>Tue, 26 Apr 2022 08:31:56 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%9B%9E%E6%BA%AF%E6%B3%95.html/</guid><description>前言 回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标，但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不</description></item></channel></rss>