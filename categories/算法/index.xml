<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>算法 - 分类 - Luckyouo Blog</title><link>https://luckyouo.github.io/categories/%E7%AE%97%E6%B3%95/</link><description>算法 - 分类 - Luckyouo Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 15 Feb 2023 09:20:22 +0800</lastBuildDate><atom:link href="https://luckyouo.github.io/categories/%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml"/><item><title>最大公约数相关算法</title><link>https://luckyouo.github.io/posts/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html/</link><pubDate>Wed, 15 Feb 2023 09:20:22 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html/</guid><description>前言 最大公约数指的是能够整除多个整数的最大正整数，且多个整数不能都为零。 裴蜀定理 裴蜀定理也称为贝祖定理，说明了对任何整数 a, b和它们的最大公约</description></item><item><title>折半搜索</title><link>https://luckyouo.github.io/posts/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2.html/</link><pubDate>Mon, 14 Nov 2022 15:07:23 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2.html/</guid><description>前言 折半搜索方法，也称为 meet in the mid 。算法的主要过程是将搜索过程分为两个更小的部分，最后在将这两者合并，得到最终结果，时间复杂度为 $2^{n/2} * k $ ，其中</description></item><item><title>动态规划 背包问题</title><link>https://luckyouo.github.io/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html/</link><pubDate>Sat, 09 Jul 2022 10:41:48 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html/</guid><description>前言 背包问题是动态规划的经典问题，也是最为常见的二维动态的规划。背包问题最简常见的有 0-1背包问题和完全背包问题。 0-1背包问题： 1 2 3 我们</description></item><item><title>位运算常用技巧</title><link>https://luckyouo.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.html/</link><pubDate>Tue, 14 Jun 2022 15:03:40 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.html/</guid><description>前言 位运算总共有六种，与、或、取反、异或、左移和右移，在面试和算法题目当中，偶尔会出现考察位运算的题目，故总结一些在算法中常用的位运算的操作</description></item><item><title>状态压缩动态规划</title><link>https://luckyouo.github.io/posts/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html/</link><pubDate>Mon, 13 Jun 2022 09:12:51 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html/</guid><description>前言 对集合进行动态规划时，一般采用状态压缩进行。此处集合指的是一个状态的一系列子状态（不包含其本身），并且本身状态还由其子状态所决定。 算法基</description></item><item><title>贪心算法</title><link>https://luckyouo.github.io/posts/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html/</link><pubDate>Thu, 09 Jun 2022 09:51:07 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html/</guid><description>前言 当最优子结构可以决定全局最优解时，则可以使用贪心算法，在保证每一步都是当前最优子结构，从而得到全局最优解。和动态规划相比，动态规划则将每</description></item><item><title>0-1 BFS</title><link>https://luckyouo.github.io/posts/0-1-bfs.html/</link><pubDate>Thu, 02 Jun 2022 10:45:15 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/0-1-bfs.html/</guid><description>前言 若要寻找两个节点路径最小权重，最为常用的方法是 Dijkstra， 当一个图各个节点的权重只有 0 和 1 （k）时，则可以使用 0-1 BFS 进行搜索 算法思想</description></item><item><title>单调栈</title><link>https://luckyouo.github.io/posts/%E5%8D%95%E8%B0%83%E6%A0%88.html/</link><pubDate>Tue, 24 May 2022 11:18:19 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8D%95%E8%B0%83%E6%A0%88.html/</guid><description>前言 极值和最值不一样，极值是由区间范围所决定的，最值是由整个区间所决定的，当求极值的一个区间的影响范围时，由于涉及多个区间，如果直接暴力求，</description></item><item><title>差分</title><link>https://luckyouo.github.io/posts/%E5%B7%AE%E5%88%86.html/</link><pubDate>Thu, 19 May 2022 10:54:59 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%B7%AE%E5%88%86.html/</guid><description>前言 差分是前缀和的相对操作，前缀和主要是用在不改变数组的情况下，相反，差分主要用在需要多次改变数组的情况下/ 算法基本思想 计算数组两两元素之间</description></item><item><title>二分查找</title><link>https://luckyouo.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html/</link><pubDate>Wed, 18 May 2022 10:22:15 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html/</guid><description>前言 二分查找一般是用来在有序序列中查找某个范围的数据，通过不断缩小范围来求解，但也可以搭配其他算法来求解其他问题。 二分搜索问题 这是学习二分查</description></item></channel></rss>