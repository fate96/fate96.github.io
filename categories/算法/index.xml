<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>算法 - 分类 - Luckyouo Blog</title><link>https://luckyouo.github.io/categories/%E7%AE%97%E6%B3%95/</link><description>算法 - 分类 - Luckyouo Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 23 Apr 2022 09:18:46 +0800</lastBuildDate><atom:link href="https://luckyouo.github.io/categories/%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml"/><item><title>凸包</title><link>https://luckyouo.github.io/posts/%E5%87%B8%E5%8C%85.html/</link><pubDate>Sat, 23 Apr 2022 09:18:46 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%87%B8%E5%8C%85.html/</guid><description>前言 点集 Q 的凸包是一个最小的凸多边形 P，满足 Q 中每个点都在 P 的边界上或在 P 的内部。 凸包 算法 Jarvis 算法 算法思路： 先找到一个必定在凸包的点，比如最左</description></item><item><title>图论 最大流和最小割</title><link>https://luckyouo.github.io/posts/%E5%9B%BE%E8%AE%BA-%E6%9C%80%E5%A4%A7%E6%B5%81%E5%92%8C%E6%9C%80%E5%B0%8F%E5%89%B2.html/</link><pubDate>Tue, 05 Apr 2022 15:09:06 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%9B%BE%E8%AE%BA-%E6%9C%80%E5%A4%A7%E6%B5%81%E5%92%8C%E6%9C%80%E5%B0%8F%E5%89%B2.html/</guid><description>前言 在图论中，找到单点 s 到单点 t 的最大流，称为最大流问题，其中 s-t 的最大流等于 s-t 的最小割，使用 Ford–Fulkerson 算法可以确认最大流。</description></item><item><title>线段树</title><link>https://luckyouo.github.io/posts/%E7%BA%BF%E6%AE%B5%E6%A0%91.html/</link><pubDate>Mon, 04 Apr 2022 08:48:38 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E7%BA%BF%E6%AE%B5%E6%A0%91.html/</guid><description>前言 线段树擅长处理区间，形状如下图 （图片取自 维基百科 线段树)。线段树是一颗完美二叉树，其叶子存储元素值值，非叶子节点存储对应区间的值，根节点</description></item><item><title>动态规划</title><link>https://luckyouo.github.io/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html/</link><pubDate>Sun, 03 Apr 2022 10:30:45 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html/</guid><description>前言 动态规划与分治方法类似，通过组合子问题解决原问题。动态规划应用与子问题重叠的情况，及不同的子问题具有公共 的子子问题的解。动态规划只能应用</description></item><item><title>博弈论</title><link>https://luckyouo.github.io/posts/%E5%8D%9A%E5%BC%88%E8%AE%BA.html/</link><pubDate>Sat, 02 Apr 2022 22:35:08 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8D%9A%E5%BC%88%E8%AE%BA.html/</guid><description>前言 博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。表面上不同的相互作用可能表现出相似的激励结构（incentive str</description></item><item><title>质因子个数计算</title><link>https://luckyouo.github.io/posts/%E8%B4%A8%E5%9B%A0%E5%AD%90%E4%B8%AA%E6%95%B0%E8%AE%A1%E7%AE%97.html/</link><pubDate>Fri, 25 Mar 2022 10:23:31 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E8%B4%A8%E5%9B%A0%E5%AD%90%E4%B8%AA%E6%95%B0%E8%AE%A1%E7%AE%97.html/</guid><description>前言 172. 阶乘后的零 该题中计算阶乘结果 0 的个数，可转换为计算 n 中含有 5 质因子的个数问题 算法思想 [1,n] 中 p 的倍数有 $n_1 = \lfloor \frac{n}{p} \rfloor$ ，以此类推可以得到 $n_i = \lfloor \frac{n}{p^i}</description></item><item><title>变位词</title><link>https://luckyouo.github.io/posts/%E5%8F%98%E4%BD%8D%E8%AF%8D.html/</link><pubDate>Thu, 24 Mar 2022 09:17:07 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8F%98%E4%BD%8D%E8%AF%8D.html/</guid><description>前言 变位词 是指字符串更改字符顺序后相等的字符串（即字符串内各个字符出现的次数相等）。变位词 匹配就是将字符串数组中所有相同的变位词找出。 剑指 Offer</description></item><item><title>字典树</title><link>https://luckyouo.github.io/posts/%E5%AD%97%E5%85%B8%E6%A0%91.html/</link><pubDate>Wed, 23 Mar 2022 10:52:02 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%AD%97%E5%85%B8%E6%A0%91.html/</guid><description>前言 字典树 ，是一种空间换时间的数据结构，又称 Trie 树、前缀树 ，是一种树形结构(字典树是一种数据结构)，用于统计、排序、和保存大量字符串 算法思想 按</description></item><item><title>双指针</title><link>https://luckyouo.github.io/posts/%E5%8F%8C%E6%8C%87%E9%92%88.html/</link><pubDate>Tue, 22 Mar 2022 18:24:36 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8F%8C%E6%8C%87%E9%92%88.html/</guid><description>前言 双指针主要用来在序列中进行遍历，其中常用方式有 快慢指针 、 对撞指针 和 滑动窗口 。可以从将暴力求解的时间复杂度 O(n^2) 降低至 O(n) 算法思想 快慢指针 快慢指</description></item><item><title>Manacher 算法</title><link>https://luckyouo.github.io/posts/manacher-%E7%AE%97%E6%B3%95.html/</link><pubDate>Mon, 21 Mar 2022 14:24:35 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/manacher-%E7%AE%97%E6%B3%95.html/</guid><description>前言 检查字符串是否为回文序列，常用方法有 中心扩展 和 Manacher 。前者的时间复杂度为 O(n^2) ，后者算法的时间复杂度为 O(n) ，可以在线性时间的完成回文序列的判断 参考</description></item></channel></rss>