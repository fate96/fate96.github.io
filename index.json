[{"categories":null,"content":"前言 最近节点也不知道怎么了，从谷歌云盘下载东西时，经常因为断流而导致下载中断，导致我的大文件几乎就下不下来，网上找了下解决方法，最后选择aria2，一个支持断点续传的软件 aria2 是一个轻量级的多协议和多源命令行下载实用程序。它支持 HTTP/HTTPS、FTP、BitTorrent 和 Metalink。 aria2 可以通过内置的 JSON-RPC 和 XML-RPC 接口进行操作。 ","date":"2022-03-08","objectID":"/aria2/:1:0","tags":null,"title":"Aria2的基本配置","uri":"/aria2/"},{"categories":null,"content":"安装 aria2 可以在Arch的官方仓库找到 sudo pacman -S aria2 同时 archlinuxcn 源和 AUR 仓库都存在对原版 aria2 补丁的 aria2-fast，原版设置了16线程的上线，该补丁版本最多可以设置为128线程 yay -S aria2-fast ","date":"2022-03-08","objectID":"/aria2/:2:0","tags":null,"title":"Aria2的基本配置","uri":"/aria2/"},{"categories":null,"content":"配置 aria2 默认配置文件位于 $HOME/.aria2/aria2.conf ，具体配置内容可以参考arch wiki 或者 P3TERX 大佬的 注意：若开启了 session,需要手动创建对应的 aria2.session 文件，否则 daemon 启动不了 ","date":"2022-03-08","objectID":"/aria2/:3:0","tags":null,"title":"Aria2的基本配置","uri":"/aria2/"},{"categories":null,"content":"设置daemon 一般情况下，aria2 下载完成后便会退出，因此我们可以使用守护单元，在开机后自动在后台保持允许即可 用户级别的 systemd unit 位于 $HOME/.config/systemd/usr 目录下，系统级别的在 /etc/systemd/system 目录下，根据自己情况选择。本教程采用用户级别 编辑对应目下的aria2.service，配置内容如下 [Unit] Description=aria2 Daemon [Service] Type=simple ExecStart=/usr/bin/aria2c --conf-path=${HOME}/.config/aria2/aria2.conf [Install] WantedBy=default.target 接着设置后台自启并立即启动 systemctl enable --user now aria2.service ","date":"2022-03-08","objectID":"/aria2/:4:0","tags":null,"title":"Aria2的基本配置","uri":"/aria2/"},{"categories":null,"content":"浏览器配置 AriaNG 是较为主流的 aria2 前端，其中有第三方在此基础之上实现的浏览器插件，比如 Chrome和 Firefox 根据配置文件的设置的RPC服务器的密码，在插件中配置好相应的 rpc-secret，同时可以在扩展选项中设置对浏览器的下载进行拦截，统一交给 aria2 服务进行下载 插件设置内容如下图所示 }} -- 至此，完成了 aria2 的基本设置 ","date":"2022-03-08","objectID":"/aria2/:5:0","tags":null,"title":"Aria2的基本配置","uri":"/aria2/"},{"categories":null,"content":"参考资料 Archlinux aria2 Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程 Arch Linux 的 Aria2 食用指南 ","date":"2022-03-08","objectID":"/aria2/:6:0","tags":null,"title":"Aria2的基本配置","uri":"/aria2/"},{"categories":null,"content":"前言 由于我的Archlinux使用了LUKS进行磁盘加密，所以在启动系统时，必须输入两次密码，一次是加密磁盘的密码，另一次是用户密码 为了减少每次进入输入系统输入两次密码的麻烦，可以设置开机后自动解锁磁盘 ","date":"2022-03-08","objectID":"/arch_auto_decrypt/:1:0","tags":null,"title":"Archlinux自动解密磁盘","uri":"/arch_auto_decrypt/"},{"categories":null,"content":"加密磁盘 加密磁盘操作具体可以参照Archlinux基础系统安装 ","date":"2022-03-08","objectID":"/arch_auto_decrypt/:2:0","tags":null,"title":"Archlinux自动解密磁盘","uri":"/arch_auto_decrypt/"},{"categories":null,"content":"开机磁盘解密 ","date":"2022-03-08","objectID":"/arch_auto_decrypt/:3:0","tags":null,"title":"Archlinux自动解密磁盘","uri":"/arch_auto_decrypt/"},{"categories":null,"content":"配置开机钩子 开机解密，需要配置开机的钩子(Hook)，根据解密钩子的方式可以分为encrypt hook和sd-encrypt hook，其中后者特性更多，因此采用后者进行解密。编辑/etc/mkinitcpio.conf文件 ，将udev更换为systemd，并添加sd-vconsole和sd-encrypt 修改前 HOOKS=(base udev autodetect keyboard modconf block filesystems fsck) 修改后为 HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems fsck) 在FILES=()这一栏中添加开机解密密钥的文件所在的位置 FILES=(/path/to/keyfile) 配置完后，重新生成mkinitcpio配置文件 mkinitcpio -P ","date":"2022-03-08","objectID":"/arch_auto_decrypt/:3:1","tags":null,"title":"Archlinux自动解密磁盘","uri":"/arch_auto_decrypt/"},{"categories":null,"content":"配置内核参数 开机解密磁盘需要告诉内核加密磁盘所在的位置，所以需要配置对应的内核参数，编辑/etc/default/grub文件，在GRUB_CMDLINE_LINUX_DEFAULT或者GRUB_CMDLINE_LINUX参数栏中增加需要添加的内核参数，前者在每次开机都会进行加载，而后者在紧急启动进入系统时则不会加载，所以建议添加在前者栏中 rd.luks.uuid=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX，使用此标志指定要在启动时解密的设备的UUID rd.luks.name=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX=name，指定加密磁盘的UUID和解密后的磁盘名，使用了该内核参数，则可以省略上面的uuid参数 rd.luks.key=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX=/path/to/keyfile，使用keyfile进行系统解密，并传入keyfile的文件位置 rd.luks.options=options，设置解密参数，可选设置。如果是SSD，可以使用discard参数提供TRIM功能 root=/dev/mapper/cryptroot: 指定解密设备，该参数不管是encrypt还是sd-crypt，都必须要设置 其中UUID获取指令如下，获取的是解密前的磁盘UUID，而不是解密后的磁盘UUID lsblk -f └─nvme0n1p2 crypto 2 a0ea985c-f2c0-4c6c-af66-2bc10a158b0a └─cryptroot ext4 1.0 96055a51-9138-431a-8976-845ca1d09e20 上述查询结果中，a0ea985c-f2c0-4c6c-af66-2bc10a158b0a才是我们需要的UUID参数 注意：这和休眠设置的UUID参数不同，休眠需要的是解密后的UUID 如下示例: GRUB_CMDLINE_LINUX_DEFAULT=\"rd.luks.name=a0ea985c-f2c0-4c6c-af66-2bc10a158b0a=cryptroot rd.luks.options=timeout=10s,discard rd.luks.key=a0ea985c-f2c0-4c6c-af66-2bc10a158b0a=/etc/mykeyfile root=/dev/mapper/cryptroot\" 修改后，重新生成grub的配置文件 grub-mkconfig -o /boot/grub/grub.cfg 至此，重启开机便可以自动使用密钥进行解锁，而需要手动输入密码进行解锁磁盘了。 ","date":"2022-03-08","objectID":"/arch_auto_decrypt/:3:2","tags":null,"title":"Archlinux自动解密磁盘","uri":"/arch_auto_decrypt/"},{"categories":null,"content":"参考资料 dm-crypt/System configuration 让系统更安全 - 系统分区加密 (Btrfs on LUKS) 操作实录 ","date":"2022-03-08","objectID":"/arch_auto_decrypt/:4:0","tags":null,"title":"Archlinux自动解密磁盘","uri":"/arch_auto_decrypt/"},{"categories":null,"content":"前言 在linux系统下，配置文件一般都是以.符号开头的，因此也被称为 dotfles。github有他人分享的配置，我们可以从中找到适合自己的配置文件 为了方便管理自己系统系统的配置文件，可以使用工具来对这些 dotfiles 进行统一管理。根据 arch wiki，常用的管理方式主要分为两种，软链接和git跟踪点文件，以下是 github 仓库中用的较多的工具 stow: GNU产品，使用软链进行管理，arch的farseerfc大佬就是使用该工具进行管理，具体介绍可以参照他的博客使用GNU stow 管理你的点文件 git bare: 使用git bare裸仓库进行管理 yadm: Yet Another Dotfiles Manager，一个git的wrapper，底层仍然是使用git来进行管理，方法使用和git没有区别，可以对特定文件加密 chezmoi: 和git用法差不多，但是会将需要跟踪的点文件冗余存储在chezmoi特定的本地仓库，可以对特定文件加密 为了保持和 git 的使用习惯，最后选择yadm作为点文件的管理工具，yadm默认相对位置为自己的家目录($HOME) ","date":"2022-03-08","objectID":"/yadm/:1:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"安装 Archlinux sudo pacman -S yadm Ubuntu/Debian sudo apt install -y yadm OSX brew install yadm ","date":"2022-03-08","objectID":"/yadm/:2:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"仓库初始化 ","date":"2022-03-08","objectID":"/yadm/:3:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"初始化本地仓库 如果一开始没有远程的 dotfiles 仓库，则需要先初始化本地仓库 yadm init yadm add \u003cimportant file\u003e yadm commit 再将本地仓库与远程仓库进行同步 yadm remote add origin \u003curl\u003e yadm push -u origin main ","date":"2022-03-08","objectID":"/yadm/:3:1","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"同步远程仓库 若一开始就有远程仓库，或使用他人的 yadm 的远程仓库时，则将远程仓库克隆下来即可 yadm clone \u003curl\u003e yadm status ","date":"2022-03-08","objectID":"/yadm/:3:2","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"基本使用 ","date":"2022-03-08","objectID":"/yadm/:4:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"添加需要跟踪的配置文件 使用 add 方法，将 dotfile 添加至 yadm 跟踪 list 当中 yadm add /path/to/dotfile ","date":"2022-03-08","objectID":"/yadm/:4:1","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"跟踪列表查看 使用 list 方法，查看当前路径下的跟踪文件，使用 -a 参数(Optional)，可以查看所有跟踪文件 yadm list \u003c-a\u003e ","date":"2022-03-08","objectID":"/yadm/:4:2","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"推送至远程仓库 使用commit和push方法，将变化文件推送至远程仓库 git commit -m \"commit word\" git push -u origin main ","date":"2022-03-08","objectID":"/yadm/:4:3","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"文件加密和解密 在$HOME/.config/yadm/encrypt文件中设置需要加密的文件，支持正则表达式，默认文件的起始地址为%HOME目录下，$HOME/.config/yadm/encrypt参考格式如下 .ssh/*.key yadm支持gpg的对称加密和非对称加密，默认加密方式为gpg的对称加密，加密后的文件存储于 $HOME/.local/share/yadm/archive 文件当中， yadm add $HOME/.config/yadm/encrypt yadm add $HOME/.local/share/yadm/archive 也可以通过 yadm config yadm.gpg-recipient \u003crecipient-address\u003e 指令指定使用非对称加密 yadm config yadm.gpg-recipient \u003crecipient-address\u003e chezmoi 不同的是，yadm 需要将文件手动进行解密，若使用对称加密，则按提示输入密码既可进行解密 注：系统没有 gunpg 则，则无法解密 yadm decrypt ","date":"2022-03-08","objectID":"/yadm/:5:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"引导程序 yadm 支持在初始化仓库时，自动调用 Bootstrap 程序执行初始化，该文件默认位置为$HOME/.config/yadm/bootstrap，且该文件必须为可执行程序 在初始化时，如果系统本身就含有 yadm 仓库对应的点文件时，yadm 默认是不会处理该文件，即不会覆盖，需要用户自己手动处理该冲突，对于引导程序，除了初始化执行时，也可以手动执行引导程序，来进行引导程序的调试 yadm bootstrap ","date":"2022-03-08","objectID":"/yadm/:6:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"参考资料 Archlinux Dotfiles Yet Another Dotfiles Manager 使用Yadm来管理我的配置 使用GNU stow 管理你的点文件 ","date":"2022-03-08","objectID":"/yadm/:7:0","tags":null,"title":"Yadm的基本使用","uri":"/yadm/"},{"categories":null,"content":"前言 Clash 是一个跨平台、支持 SS/V2ray 等协议、基于规则的网络代理软件 Clash 只是一个内核，为开源软件，而 Clash-premium 是闭源软件，后者多了scripts，rule-set和tun(windows只能使用该功能实现全局代理) 从clash的内核衍生了众多版本，用的最多的有 Clash for windows (简称 cfw )，Open Clash，Clashx。其中cfw不仅支持windows，还支持macos和linux，open Clash只支持路由器的openwrt系统，Clashx只支持macos ","date":"2022-03-07","objectID":"/clash/:1:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"安装 在 arch 的官方仓库当中有根据 clash 内核打包好的组件，aur社区有打包好的 cfw 和 clash-user。其中cfw有ui界面，与 windows 上设置没有什么区别，而 clash-user 自带 clash 用户，可以根据用户的 uid 来设置防止流量回环 由于 linux 可以使用 tproxy 实现全局代理，可以直接使用官方仓库的 clash (或者 aur 的 clash-user ），来减少 clash 的资源占用( cfw 的 gui 需要占用资源) sudo pacman -S clash 使用yacd面板对Clash管理和流量监控 yay -S yacd ","date":"2022-03-07","objectID":"/clash/:2:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"文件配置 clash 默认的配置文件位于用户目录下，而 clash-user 的配置位于/etc/clash目录下 配置中主要参数解释： port: http(s)代理端口 socks-port: socks5代理端口 redir-port: redir tcp代理端口 tproxy-port: tproxy udp(tcp)代理端口 mode: 代理方式，有全局代理(gloable)、规则代理(rule)和直连(direct)。其rle根据配置所提供的规则流量代理 external-controller: clash提供的api控制地址 external-ui: 外部控制ui地址 profile: clash部分存储设置模块 store-selected: 策略组节点选择后，是否需要存储选择记录，默认不存储(false) store-fake-ip: 设置为 true 是，将 fake-ip 与真实 dns 的 ip 对应记录存储在本地，以达到持久存储 dns 记录，加快 dns 解析速度 dns: clash的dns模块 enable: 设置为 true 时开启 clash 内置的dns模块 listen: dns 的监听端口 enhanced-mode: clash 提供两种 dns 查询模式，一种为正常 redir 转发模式，另一种为 fake-ip 模式，每次应用 dns 请求时，clash 将返回一个 fake 的 ip 地址，来达到加速建立 tcp 连接需求，但也会导致得到的 ip 不是真实的 ip，从而对某些网络调试带来麻烦 nameserver: dns 查询服务器，可以设置为 doh，tls 等dns查询方式。具体可以根根据个人习惯设置 fake-ip-filter: 过滤不使用 fake-ip 查来询dns的地址 proxies: 代理节点设置模块，请根据官方要求进行设置 proxy-groups: clash 的策略组，与 surge 类似。包含 relay(轮询)，url-test(ping最低优先)，load-balance(负载均衡)，fallback(按节点顺序优先使用可用节点)，select(手动选择节点) proxy-providers: 节点提供模块，一次可以提供多个级诶但，clash的1.9.0中增加了filter用来过滤节点 type: 节点组提供的类型，可选 http (远程提供)和 file (本地文件提供) filter: 节点过滤方式，支持正则 rules: 规则模块，以下是官方提供的说明，可以根据需要进行规则设置 DOMAIN: 规则会匹配与请求完全相同的地址 DOMAIN-SUFFIX: 规则会匹配与请求与主域名相同的地址，比如，google.com匹配www.google.com, mail.google.com和google.com本身，但不会匹配content-google.com DOMAIN-KEYWORD: 规则会匹配包含相应关键字的域名，除了 “apple” 会匹配 www.apple.com，“app” 同样也会匹配到 GEOIP: 规则会匹配相应国家和地区的 IP 地址 IP-CIDR: 规则会匹配规则范围内请求的 IP 地址 IP-CIDR6: 规则会匹配规则范围内请求的 IPv6 地址 SRC-IP-CIDR: 规则会匹配源 IP 地址 SRC-PORT: 规则会匹配源端口地址 DST-PORT: 规则会匹配目的地端口地址 PROCESS-NAME: 规则会匹配这个进程名的程序 MATCH: 将其余数据包路由到策略。此规则是必需的 以下为本人根据 clash 提供的官方配置进行更改的自用配置。dns 设置为 fake-ip 模式，dns 服务器均采用 doh，防止国内而 dns 污染，并使用 yacd 模块。因为 clash 开源版不支持rule-set模块(clash-premium支持)，所以不能像 surge 一样简洁书写规则，嫌规则冗长的可以使用 clash-premium 闭源软件书写，其他模块书写规则一致 mixed-port:7890allow-lan:truemode:Rulelog-level:warningexternal-controller:127.0.0.1:9090socks-port:7891redir-port:7892tproxy-port:7893ipv6:falseexternal-ui:'/usr/share/yacd'profile:store-selected:falsestore-fake-ip:truedns:enable:truelisten:0.0.0.0:1053enhanced-mode:fake-ipfake-ip-range:198.18.0.1/16nameserver:- https://223.5.5.5/dns-query- https://doh.pub/dns-query#- 114.114.114.114#- 223.5.5.5fallback:- https://1.1.1.1/dns-query- https://1.0.0.1/dns-query- https://8.8.8.8/dns-queryfallback-filter:geoip:truegeoip-code:CNfake-ip-filter:- '*.lan'- '*.localhost'- '*.local'- 'lens.l.google.com'- 'stun.l.google.com'- '*.gitbook.io'proxy-providers:HK_LOW:type:filepath:./cordcloud.yamlinterval:3600filter:'长沙联通转香港|广东移动转香港'health-check:enable:trueurl:http://wifi.vivo.com.cn/generate_204interval:600HK:type:filepath:./cordcloud.yamlinterval:3600filter:'深港专线'health-check:enable:trueurl:http://wifi.vivo.com.cn/generate_204interval:600TW:type:filepath:./cordcloud.yamlinterval:3600filter:'台湾'health-check:enable:trueurl:http://wifi.vivo.com.cn/generate_204interval:600JP:type:filepath:./cordcloud.yamlinterval:3600filter:'日本'health-check:enable:trueurl:http://wifi.vivo.com.cn/generate_204interval:600SG:type:filepath:./cordcloud.yamlinterval:3600filter:'新加坡'health-check:enable:trueurl:http://wifi.vivo.com.cn/generate_204interval:600US:type:filepath:./cordcloud.yamlinterval:3600filter:'美国'health-check:enable:trueurl:http://wifi.vivo.com.cn/generate_204interval:600proxy-groups:- name:Finaltype:selectproxies:- Proxies- DIRECT- name:Proxiestype:selectproxies:- load_balance- hk_urltest- tw_urltest- sg_urltest- us_urltest- name:StreamSEtype:selectproxies:- load_balance- hk_urltest- tw_urltest- sg_urltest- us_urltest- name:Googletype:selectproxies:- hk_fallback- hk_urltest- tw_urltest- sg_urltest- Proxies- name:Telegramtype:selectproxies:- sg_urltest- hk_urltest- tw_urltest- Proxies- name:load_balancetype:load-balanceurl:http://wifi.vivo.com.cn/generate_204interval:300proxies:use:- HK_LOW- name:hk_urltesttype:url-testurl:http://wifi.vivo.com.cn/generate_204interval:300proxies:use:- HK_LOW- name:hk_fallbacktype:fallbackurl:http://wifi.vivo.com.cn/generate_204interval:300proxies:use:- HK- name:us_urltesttype:url-testurl:http://wifi.vivo.com.cn/generate_204in","date":"2022-03-07","objectID":"/clash/:3:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"TProxy代理设置 采用clash官方推荐的wiki的防火墙设置，来拦截流量，由于udp不支持redir，所以tcp采用redir，udp采用tproxy(也都可以采用tproxy)，dns拦截端口为上述文件设置的1053，将dns的udp查询均转发至1053端口 为了防止clash代理自身流量，有两种常用方式避免流量回环，cgroup和uid。第一种方式将clash加入特定cgroup足，比如自定义的noproxy组，第二种方式为使用clash用户来启动clash进程。接着使用iptables来匹配对于流量 官方推荐wiki的iptables规则如下 #tcp iptables -t nat -N clash iptables -t nat -A clash -d 0.0.0.0/8 -j RETURN iptables -t nat -A clash -d 10.0.0.0/8 -j RETURN iptables -t nat -A clash -d 127.0.0.0/8 -j RETURN iptables -t nat -A clash -d 169.254.0.0/16 -j RETURN iptables -t nat -A clash -d 172.16.0.0/12 -j RETURN iptables -t nat -A clash -d 192.168.0.0/16 -j RETURN iptables -t nat -A clash -d 224.0.0.0/4 -j RETURN iptables -t nat -A clash -d 240.0.0.0/4 -j RETURN iptables -t nat -A clash -p tcp -j REDIRECT --to-port 7892 iptables -t nat -I PREROUTING -p tcp -d 8.8.8.8 -j REDIRECT --to-port 7892 iptables -t nat -I PREROUTING -p tcp -d 8.8.4.4 -j REDIRECT --to-port 7892 iptables -t nat -A PREROUTING -p tcp -j clash iptables -t nat -A OUTPUT -p tcp -d 198.18.0.0/16 -j REDIRECT --to-port 7892 #udp ip rule add fwmark 1 table 100 ip route add local default dev lo table 100 iptables -t mangle -N clash iptables -t mangle -A clash -d 0.0.0.0/8 -j RETURN iptables -t mangle -A clash -d 10.0.0.0/8 -j RETURN iptables -t mangle -A clash -d 127.0.0.0/8 -j RETURN iptables -t mangle -A clash -d 169.254.0.0/16 -j RETURN iptables -t mangle -A clash -d 172.16.0.0/12 -j RETURN iptables -t mangle -A clash -d 192.168.0.0/16 -j RETURN iptables -t mangle -A clash -d 224.0.0.0/4 -j RETURN iptables -t mangle -A clash -d 240.0.0.0/4 -j RETURN iptables -t mangle -A clash -p udp -j TPROXY --on-port 7893 --tproxy-mark 1 iptables -t mangle -A OUTPUT -p udp -d 198.18.0.0/16 -j MARK --set-mark 1 iptables -t mangle -A PREROUTING -p udp -j clash iptables -t nat -N CLASH_DNS iptables -t nat -F CLASH_DNS iptables -t nat -A CLASH_DNS -p udp -j REDIRECT --to-port 1053 iptables -t nat -I OUTPUT -p udp --dport 53 -j CLASH_DNS iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to 1053 # 以下二选一 # 使用noproxy的cgroup组来防止流量回环 iptables -t mangle -A OUTPUT -m cgroup --path \"noproxy.slice\" -j RETURN # 使用uid来防止流量回环 # iptables -t mangle -A clash-self -m owner --uid-owner clash -j RETURN ","date":"2022-03-07","objectID":"/clash/:4:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"iptables规则持久化 iptables 规则在每次系统重启后，都会进行复原，因此如果设置错误导致无法上网时，可以删除防火墙对应规则或直接重启电脑解决 为了让iptables规则持久化，可以设置一个开机自启服务，自动运行对应脚本以设置防火墙。将上述 iptables 规则保存为为 iptables.sh ，并创建 /etc/systemd/system/tproxy.service，编辑设置内容如下 [Unit] Description=Setup ip-rule and ip-route for tproxy local network traffic. Before=network-pre.target Wants=network-pre.target [Service] Type=oneshot ExecStart=/bin/bash /path/to/iptables.sh RemainAfterExit=yes [Install] WantedBy=multi-user.target 设置服务开机自启 sudo systemctl enable tproxy.service ","date":"2022-03-07","objectID":"/clash/:5:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"启动服务 clash 需要部分网络代理能力，编辑 clash@ 服务文件，添加 clash 的 capability 能力， sudo systemctl edit clash@.service 添加如下内容 CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW 让应用可以处理 TProxy 带来的流量 CAP_NET_BIND_SERVICE 允许应用绑定 1000 以下的端口 如果采用 cgroup 防止流量回环，还需要设置该服务所对应的 Slice，采用 UID 识别的话，则需要设置该服务的启动 USER，二选一即可，也可以同时都设置。若设置 UID 时，必须保证系统存在相应用户名 # cgroup Slice = noproxy.slice # UID User = username 同时设置 clash@$USER 服务后台自动，并立即启动 sudo systemctl enable --now clash@$USER.service ","date":"2022-03-07","objectID":"/clash/:6:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"docker流量问题解决 为了解决 cgproxy 代理 bridge 联网的 docker 无法联网问题，需要进行如下而外设置 sysctl -w net.bridge.bridge-nf-call-iptables=0 sysctl -w net.bridge.bridge-nf-call-ip6tables=0 sysctl -w net.bridge.bridge-nf-call-arptables=0 ","date":"2022-03-07","objectID":"/clash/:7:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"参考资料 Clash github Wik Unofficial Clash Wiki clash-win-docs-new 容器(docker)桥接(bridge)模式时的代理问题 如何使用 Clash 的 TPROXY 功能进行透明代理 ","date":"2022-03-07","objectID":"/clash/:8:0","tags":null,"title":"Clash安装与使用","uri":"/clash/"},{"categories":null,"content":"前言 作为主力系统，自然需要桌面系统(DE)。主流DE有KDE和GNOME等，根据个人习惯选择系统。本文主要介绍KDE桌面系统的安装 ","date":"2022-03-07","objectID":"/arch_desktop_install/:1:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"联网 由于桌面系统还没有安装完成，所以采用iwd和dhcpcd进行网络连接，首先启动iwd和dhcpcd，在使用iwd连接无限网络。iwd参照基础系统安装教程 systemctl start iwd systemctl start dhcpcd ","date":"2022-03-07","objectID":"/arch_desktop_install/:2:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"准备普通用户 由于桌面系统需要普通用户，故先添加普通用户，并配置相应的权限 useradd -m -G wheel -s /bin/bash username passwd username 配置sudo权限 EDITOR=vim visudo 找到下面该行，并取消注释 #%wheel ALL=(ALL) ALL ","date":"2022-03-07","objectID":"/arch_desktop_install/:3:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"安装KDE环境 KDE安装有三个包组，plasma-meta、plasma和plasma-desktop。其中plasma和plasma-meta区别为，kde后续增加软件包时，plasma-meta会自动安装，而plasma不会，剩下plasma-desktop只有kde能跑起来最少的软件。推荐使用plasma-meta，防止后续缺少组件。konsole和dolphin分别为kde的常用终端和文件管理 pacman -S plasma-meta konsole dolphin ","date":"2022-03-07","objectID":"/arch_desktop_install/:4:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"启用DM kde默认自带sddm，可以根据需要更换 systemctl enable sddm ","date":"2022-03-07","objectID":"/arch_desktop_install/:5:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"启用网络管理组件 kde和gnome桌面系统一般采用NetworkManager进行网络管理 systemctl enable NetworkManager ","date":"2022-03-07","objectID":"/arch_desktop_install/:6:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"重启进入桌面系统 自此，基本的桌面系统已经安装完成，可以重启进入桌面系统 reboot ","date":"2022-03-07","objectID":"/arch_desktop_install/:7:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"AUR Helper安装 yay和paru是较为常用的aur helper组件，根据个人习惯进行选择 注：由于安装需要从github拉取文件，需要配置代理才可以进行 git clone https://aur.archlinux.org/yay.git cd yay makepkg -si ","date":"2022-03-07","objectID":"/arch_desktop_install/:8:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"输入法安装 facitx5为社区推荐输入法，安装facitx5 sudo pacman -S fcitx5-im sudo pacman -S fcitx5-chinese-addons fcitx5-pinyin-zhwiki fcitx5-material-colo 配置环境，konsole和dolphin需要环境变量的支持才可以使用输入法，使用EDITOR=vim sudoedit /etc/environment进行添加环境变量 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx ","date":"2022-03-07","objectID":"/arch_desktop_install/:9:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"配置默认编辑器 arch默认编辑器为vi，一般使用vim，使用EDITOR=vim sudoedit /etc/profile配置环境变量 export EDITOR='vim' ","date":"2022-03-07","objectID":"/arch_desktop_install/:10:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"蓝牙配置 安装并配置蓝牙 sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa yay -S bluez-firmware sudo systemctl enable bluetooth.service sudo systemctl start bluetooth.service pulseaudio -k pulseaudio --start sudo usermod -a -G lp $USER 设置蓝牙自启，编辑/etc/bluetooth/main.conf文件，更改AutoEnable的值为true sudo vim /etc/bluetooth/main.conf ","date":"2022-03-07","objectID":"/arch_desktop_install/:11:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"KDE安装完成 自此，arch的KDE系统基本完成安装。 KDE是可以根据自己的需要进行高度定制化，可以根据自己的需要进行定制化 ","date":"2022-03-07","objectID":"/arch_desktop_install/:12:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"参考资料 Archlinux Installation guide Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio 2021 Archlinux双系统安装教程（超详细） Arch Linux Monthly Install: January 2022 ","date":"2022-03-07","objectID":"/arch_desktop_install/:13:0","tags":null,"title":"Archlinux桌面系统安装","uri":"/arch_desktop_install/"},{"categories":null,"content":"前言 第一次使用linux系统，查询linux各个版本的区别，最后看上了arch的aur，故选择arch作为主力linux系统(人的生命在于折腾，折腾就完事了) 这篇主要记录了基本系统的安装，不包含桌面系统 ","date":"2022-03-07","objectID":"/arch_general_install/:1:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"EFI模式验证 首先确认安装模式是否为EFI模式 ls /sys/firmware/efi/efivars ","date":"2022-03-07","objectID":"/arch_general_install/:2:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"系统时钟校正 timedatectl set-ntp true ","date":"2022-03-07","objectID":"/arch_general_install/:3:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"进行网络连接 arch系统网络连接方式主要有两种，有线连接和无线连接 ","date":"2022-03-07","objectID":"/arch_general_install/:4:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"有线连接 可以使用手机线与电脑进行连接，进行网络共享 ","date":"2022-03-07","objectID":"/arch_general_install/:4:1","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"无线连接 arch live系统默认为开启iwd,使用iwd进行无线网络连接 iwctl device list station wlan0 get-networks station waln0 connect WIFI-NAME 首先进入iwctl模式，查询当前设备无线网卡设备名,比如wlan0），再使用网卡查询当前wifi网络情况，最后对目标WIFI-NAME进行连接，提示输入密码进行确认 ","date":"2022-03-07","objectID":"/arch_general_install/:4:2","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"数据分区及格式化 ","date":"2022-03-07","objectID":"/arch_general_install/:5:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"分区 常见分区工具有cfdisk,gdisk等。为了方便，可以使用GUI的cfdisk进行分区 为了防止某些异常，优先对efi进行分区，大小500M～1G即可 剩下分区方式根据个人习惯进行。 比以将home分区单独分区，缺点是home分区和其他分区大小需要控制好，防止某分区空间爆满而需要对文件系统挪动， 将剩余分区大小划分为一个分区，缺点是重装系统麻烦 为了节省存储空间，故采用第二种方式。分区完成后，对主分区进行加密(Optional) ","date":"2022-03-07","objectID":"/arch_general_install/:5:1","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"加密(可选) 为了保证自己的数据安全，可以对主要分区内容进行加密，防止他人挂载直接进入系统读取文件。 使用LUKS对主分区进行加密，没有特殊要求采用默认参数即可 默认使用手动输入密码对文件进行加密 cryptsetup -y -v luksFormat /path/to/device 使用keyfile对文件进行加密 首先生成所需要的keyfile文件，根据生成keyfile文件的类型不同，可以分为密码方式和随机字符或二进制。 为了简便，采用密码对文件进行加密，并将密码制作为keyfile,用作开机自动解密。 echo -n 'your_passphrase' \u003e /etc/keyfile chown root:root /etc/keyfile; chmod 400 /etc/keyfile 解密分区 cryptroot 为解密后对应的文件名，可以自定义 cryptsetup open /path/to/device/ cryptroot ","date":"2022-03-07","objectID":"/arch_general_install/:5:2","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"格式化 efi分区采用mkfs.fat进行格式化。主分区根据不同的文件类型特性进行选择格式化，比如mkfs.ext4格式化为ext4,mkfs.btrfs格式化为btrfs，其中ext4速度整体快于btrfs,而btrfs存在快照等特性。 mkfs.fat -F 32 /path/to/efi mkfs.ext4 /path/to/device ","date":"2022-03-07","objectID":"/arch_general_install/:5:3","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"挂载分区，并安装基本软件 先挂载/mnt分区，在创建/mnt/boot分区，并挂载(也可以创建/mnt/efi分区并进行挂载，二者不同之处可以查看archwiki) mount /dev/mapper/cryptroot /mnt mount /path/to/efi /mnt/boot 其中cryptroot为解密后分区所对应的名字，挂载时需要选择解密后的分区名 使用pacstarp在/mnt分区中安装基本软件，并生成分区文件，最后进入安装系统(根据电脑CPU类型安装所需要的微码，intel的cpu安装intel-ucode，amd的安装amd-ucode) pacstarp /mnt base base-devel linux linux-headers linux-firmware sudo amd-ucode genfstab -U /mnt \u003e\u003e /mnt/etc/fstab arch-chroot /mnt ","date":"2022-03-07","objectID":"/arch_general_install/:6:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"更改镜像源并启用32位库 由于国外镜像站网速限制，可以使用国内教育镜像站进行加速，镜像配置文件为/etc/pacman.d/mirrorlist，可以设置多个镜像站 Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch 由于部分软件需要32位库，比如wine,而默认32位库是注释掉了，需要取消注释才能启用，不需要32位软件的可以不进行该操作。pacman的默认库文件位/etc/pacman.conf，取消注释multilib库 [multilib] Server = /etc/pacman.d/mirrorlist ","date":"2022-03-07","objectID":"/arch_general_install/:7:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"修改密码 修改root的密码 passwd ","date":"2022-03-07","objectID":"/arch_general_install/:8:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"基础软件安装 安装基础软件，比如网络，编辑器等 pacman -S networkmanager vim git wget curl dhcpcd iwd bash-completion dialog wpa_supplicant ","date":"2022-03-07","objectID":"/arch_general_install/:9:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"时区和区域设置 使用软链设置时区，比如设置位亚洲的上海时区，并同步 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc 区域设置，对应文件位/etc/locale.gen，编辑并取消所需要的区域设置，并生成对应文件 vim /etc/locale.gen # 取消en_US.UTF-8和zh_CN.UTF-8的注销 locale-gen 向/etc/locale.conf导入本地语言设置，防止乱码 echo 'LANG=en_US.UTF-8' \u003e /etc/locale.conf ","date":"2022-03-07","objectID":"/arch_general_install/:10:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"主机名设置 编辑/etc/hostname，设置主机名，比如arch，并根据主机名设置host文件 echo arch \u003e /etc/hostname cat \u003e /etc/hosts \u003c\u003cEOF 127.0.0.1 localhost ::1 localhost 127.0.1.1 arch.localdomain arch EOF ","date":"2022-03-07","objectID":"/arch_general_install/:11:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"安装引导文件 引导文件有grub和system-boot，system-boot需要手动写入启动文件，grub指令可以直接生成，较为方便，故采用grub(若efi分区挂载为/mnt/efi，则将efi-directory更改为/efi) pacman -S grub efibootmgr grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB grub-mkconfig -o /boot/grub/grub.cfg ","date":"2022-03-07","objectID":"/arch_general_install/:12:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"解密参数配置(可选) 如果对磁盘设置了加密，必须设置一些hook和内核参数来告诉内核加密磁盘的位置 具体操作可以参见Archlinux自动解密磁盘 ","date":"2022-03-07","objectID":"/arch_general_install/:13:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"完成安装 基本系统已经完成安装，退出系统，并取消文件挂载，重启既可以进入安装好的系统 exit umount -a reboot ","date":"2022-03-07","objectID":"/arch_general_install/:14:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"},{"categories":null,"content":"参考资料 Archlinux Installation guide dm-crypt/Encrypting an entire system Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio Arch Linux 搭建 java 开发环境 2021 Archlinux双系统安装教程（超详细） Arch Linux Monthly Install: January 2022 ","date":"2022-03-07","objectID":"/arch_general_install/:15:0","tags":null,"title":"Archlinux的基础系统安装流程","uri":"/arch_general_install/"}]