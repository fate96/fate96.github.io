<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Luckyouo Blog</title><link>https://luckyouo.github.io/posts/</link><description>所有文章 | Luckyouo Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 06 May 2022 14:22:04 +0800</lastBuildDate><atom:link href="https://luckyouo.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Python 中常用而数据结构</title><link>https://luckyouo.github.io/posts/python-%E4%B8%AD%E5%B8%B8%E7%94%A8%E8%80%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/</link><pubDate>Fri, 06 May 2022 14:22:04 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/python-%E4%B8%AD%E5%B8%B8%E7%94%A8%E8%80%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/</guid><description>前言 使用 python 刷算法时，记录一些常用的数据结构 数据结构 Array-Like(List/Tuple) python 内置没有 array 数组，但提供了 list 列表和 tuple 元组，二者底层都是通过数组实现。list 为长度可变数</description></item><item><title>约瑟环</title><link>https://luckyouo.github.io/posts/%E7%BA%A6%E7%91%9F%E7%8E%AF.html/</link><pubDate>Wed, 04 May 2022 09:00:39 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E7%BA%A6%E7%91%9F%E7%8E%AF.html/</guid><description>前言 阿橋问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。 人们站在一个等待</description></item><item><title>lambda 表达式</title><link>https://luckyouo.github.io/posts/lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F.html/</link><pubDate>Sun, 01 May 2022 20:22:17 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F.html/</guid><description>前言 java 8 增加的一个重大特性，就是 lambda 表达式了。lambda 作为 java 的语法糖，提供了更加简洁的语法书写，减少了使用匿名类带来的代码冗余性。 在 java 8 之</description></item><item><title>Java Stream</title><link>https://luckyouo.github.io/posts/java-stream.html/</link><pubDate>Sat, 30 Apr 2022 08:42:35 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/java-stream.html/</guid><description>前言 Stream 是 java 8 增加的新特性。流提供了一种可以让我们在更高的概念级别上指定计算任务的数据视图，通过流可以说明我们想要完成什么任务，而不是说明如何</description></item><item><title>自动机</title><link>https://luckyouo.github.io/posts/%E8%87%AA%E5%8A%A8%E6%9C%BA.html/</link><pubDate>Fri, 29 Apr 2022 10:20:46 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E8%87%AA%E5%8A%A8%E6%9C%BA.html/</guid><description>前言 确定有限状态自动机或确定有限自动机（英语：deterministic finite automaton, DFA）是一个能实现状态转移的自动机。对于一个给定的属于该自动机</description></item><item><title>回溯法</title><link>https://luckyouo.github.io/posts/%E5%9B%9E%E6%BA%AF%E6%B3%95.html/</link><pubDate>Tue, 26 Apr 2022 08:31:56 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%9B%9E%E6%BA%AF%E6%B3%95.html/</guid><description>前言 回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标，但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不</description></item><item><title>Python 基础</title><link>https://luckyouo.github.io/posts/python-%E5%9F%BA%E7%A1%80.html/</link><pubDate>Mon, 25 Apr 2022 14:57:24 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/python-%E5%9F%BA%E7%A1%80.html/</guid><description>前言 记录一些 python 的基础使用 内容 两个列表相加 python 中两个列表相加时，是将两个列表合并为一个列表，合并顺序与相加顺序一致。这与 pytorch 的向量相加不一样，py</description></item><item><title>Java 数组和集合之间的转换</title><link>https://luckyouo.github.io/posts/java-%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.html/</link><pubDate>Sun, 24 Apr 2022 09:54:56 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/java-%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.html/</guid><description>前言 算法题目中，经常出现集合和数组之间、集合和集合之间的转换。 内容 List 和 数组 List 转 数组 通过 toArray(T[] a) 方法 （推荐） toArray(T[] a) 方法是 Collection 接口中的方法，用来将集合转</description></item><item><title>凸包</title><link>https://luckyouo.github.io/posts/%E5%87%B8%E5%8C%85.html/</link><pubDate>Sat, 23 Apr 2022 09:18:46 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%87%B8%E5%8C%85.html/</guid><description>前言 点集 Q 的凸包是一个最小的凸多边形 P，满足 Q 中每个点都在 P 的边界上或在 P 的内部。 凸包 算法 Jarvis 算法 算法思路： 先找到一个必定在凸包的点，比如最左</description></item><item><title>word2vec 代码实现</title><link>https://luckyouo.github.io/posts/word2vec-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.html/</link><pubDate>Fri, 22 Apr 2022 21:40:23 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/word2vec-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.html/</guid><description>前言 word2vec 算法代码实现，代码来自 d2l 代码 下采样 将每次词汇以概率 $w_i$ 丢弃，其中高频词丢弃的概率更高 $$P(w_i) = \max\left(1 - \sqrt{\frac{t}{f(w_i)}}, 0\right)$$ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def subsample(sentences, vocab):</description></item></channel></rss>