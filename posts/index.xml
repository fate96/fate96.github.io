<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Luckyouo Blog</title><link>https://luckyouo.github.io/posts/</link><description>所有文章 | Luckyouo Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 25 Apr 2023 23:11:57 +0800</lastBuildDate><atom:link href="https://luckyouo.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Nacos 注册中心和配置中心</title><link>https://luckyouo.github.io/posts/nacos-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html/</link><pubDate>Tue, 25 Apr 2023 23:11:57 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/nacos-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html/</guid><description>前言 在微服务当中，各个微服务需要进行相互调用，一般是通过注册中心来完成。 注册中心 常用的注册中心有 Nacos 和 Eureka，前者是 alibaba 中的组件，后者是 Spring</description></item><item><title>RabbitMQ 消息队列</title><link>https://luckyouo.github.io/posts/rabbitmq-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html/</link><pubDate>Tue, 25 Apr 2023 20:15:04 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/rabbitmq-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html/</guid><description>前言 在微服务中，可以通过消息中间件来给服务之间传递数据，并提升系统的异步能力。 消息队列 消息队列主要有如下四种实现方式： 点对点式：消息只有唯一</description></item><item><title>Redisson 分布式锁</title><link>https://luckyouo.github.io/posts/redisson-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html/</link><pubDate>Tue, 25 Apr 2023 19:35:57 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/redisson-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html/</guid><description>前言 在微服务应用当中，某一个服务可能部署在多台机器上，在高并发的情况下，对资源的访问可能出现读写数据异常，而 Java 内部提供的 JUC 只能在单应用的情况</description></item><item><title>JUC 并发编程</title><link>https://luckyouo.github.io/posts/juc-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html/</link><pubDate>Mon, 20 Mar 2023 20:51:58 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/juc-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html/</guid><description><![CDATA[前言 JUC 是 &ldquo;java.util.concurrent&rdquo; 的简称，主要指的就是该包下一些常用的并发工具类，包括 &ldquo;java.util.concurrent&rdquo; 、 &ldquo;java.util.concurrent.atomic&rdquo; 和 &ldquo;java.util.concurrent.locks&rdquo; 。 基本内容 线程 Java 无法开启线程 ，start 方法是通过调用 native 方法（ C/C++ 方法]]></description></item><item><title>最大公约数相关算法</title><link>https://luckyouo.github.io/posts/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html/</link><pubDate>Wed, 15 Feb 2023 09:20:22 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html/</guid><description>前言 最大公约数指的是能够整除多个整数的最大正整数，且多个整数不能都为零。 裴蜀定理 裴蜀定理也称为贝祖定理，说明了对任何整数 a, b和它们的最大公约</description></item><item><title>折半搜索</title><link>https://luckyouo.github.io/posts/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2.html/</link><pubDate>Mon, 14 Nov 2022 15:07:23 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2.html/</guid><description>前言 折半搜索方法，也称为 meet in the mid 。算法的主要过程是将搜索过程分为两个更小的部分，最后在将这两者合并，得到最终结果，时间复杂度为 $2^{n/2} * k $ ，其中</description></item><item><title>动态规划 背包问题</title><link>https://luckyouo.github.io/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html/</link><pubDate>Sat, 09 Jul 2022 10:41:48 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html/</guid><description>前言 背包问题是动态规划的经典问题，也是最为常见的二维动态的规划。背包问题最简常见的有 0-1背包问题和完全背包问题。 0-1背包问题： 1 2 3 我们</description></item><item><title>位运算常用技巧</title><link>https://luckyouo.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.html/</link><pubDate>Tue, 14 Jun 2022 15:03:40 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.html/</guid><description>前言 位运算总共有六种，与、或、取反、异或、左移和右移，在面试和算法题目当中，偶尔会出现考察位运算的题目，故总结一些在算法中常用的位运算的操作</description></item><item><title>cs224n lecture9 transformer</title><link>https://luckyouo.github.io/posts/cs224n-lecture9-transformer.html/</link><pubDate>Mon, 13 Jun 2022 20:05:17 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/cs224n-lecture9-transformer.html/</guid><description>前言 由于注意力极值可以大幅提高 RNN 网络的性能，为此，google 提出了一个只是用注意力机制的网络。在 Is Attention All We Need paper中，提出了 Transf</description></item><item><title>状态压缩动态规划</title><link>https://luckyouo.github.io/posts/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html/</link><pubDate>Mon, 13 Jun 2022 09:12:51 +0800</pubDate><author>作者</author><guid>https://luckyouo.github.io/posts/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html/</guid><description>前言 对集合进行动态规划时，一般采用状态压缩进行。此处集合指的是一个状态的一系列子状态（不包含其本身），并且本身状态还由其子状态所决定。 算法基</description></item></channel></rss>